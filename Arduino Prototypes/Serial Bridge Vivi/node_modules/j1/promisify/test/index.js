const assert = require('assert');
const promisify = require('..');

describe('promisify', function () {

	it('should reject with error', function () {
		const expectedError = new Error('Expected error');
		const fn = promisify((...args) => {
			args.pop()(expectedError);
		});
		return fn(1, 2, 3)
			.then(() => {
				throw new Error('Resolved');
			})
			.catch((error) => {
				if (error !== expectedError) {
					throw error;
				}
			});
	});

	it('should resolve with result', function () {
		const fn = promisify((...args) => {
			const callback = args.pop();
			callback(null, args);
		});
		return fn(1, 2, 3)
			.then((result) => {
				assert.deepEqual(result, [1, 2, 3]);
			});
	});

	it('should call the function in the thisArg context', function () {
		const fn = promisify(function (...args) {
			args.pop()(null, this);
		}, 123);
		return fn(1, 2, 3)
			.then((result) => {
				assert.equal(result, 123);
			});
	});

});
