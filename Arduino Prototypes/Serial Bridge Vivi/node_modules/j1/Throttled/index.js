const Duplex = require('stream').Duplex;

class Throttled extends Duplex {

	constructor(rate = 8) {
		let waiting = true;
		super();
		this.rate = rate;
		this.chunkSize = Math.ceil(rate / 50);
		this.interval = this.chunkSize * 1000 / this.rate;
		this.buffer = Buffer.alloc(0);
		this.created = Date.now();
		this.on('pipe', function (source) {
			if (waiting) {
				waiting = false;
				source.unpipe(this);
				source.pipe(this, {
					end: false
				});
				source.on('end', () => {
					this.noMoreData = true;
					if (!this.isBusy) {
						this.consume();
					}
				});
			}
		});
	}

	consume() {
		const currentBuffer = this.buffer;
		const chunkSize = this.chunkSize;
		this.push(currentBuffer.slice(0, chunkSize));
		this.buffer = currentBuffer.slice(chunkSize);
		if (0 < this.buffer.length) {
			this.isBusy = true;
			setTimeout(() => {
				this.consume();
			}, this.interval);
		} else {
			if (this.noMoreData) {
				this.push(null);
				this.end();
			} else {
				setTimeout(() => {
					this.isBusy = false;
					this.consume();
				}, this.interval * (currentBuffer.size / chunkSize));
			}
		}
	}

	_read() {}

	_write(chunk, encoding, callback) {
		this.buffer = Buffer.concat([this.buffer, chunk]);
		if (!this.isBusy) {
			this.consume();
		}
		callback();
	}

}

module.exports = Throttled;
