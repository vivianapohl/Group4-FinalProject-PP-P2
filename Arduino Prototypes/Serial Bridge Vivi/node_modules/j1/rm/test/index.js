const path = require('path');
const fs = require('fs');
const assert = require('assert');
const promisify = require('../../promisify');
const _writeFile = require('../../writeFile');
const _mkdir = require('../../mkdir');
const rm = require('..');
const readFile = promisify(fs.readFile, fs);
const stat = promisify(fs.stat, fs);
const link = promisify(fs.link, fs);
const symlink = promisify(fs.symlink, fs);

const writeFile = (filePath, data, options) => {
	return _writeFile(filePath, data, options)
		.then(() => {
			return readFile(filePath, 'utf8');
		})
		.then((readData) => {
			assert.equal(readData, data);
			return filePath;
		});
};

const mkdir = (dirPath, options) => {
	return _mkdir(dirPath, options)
		.then(() => {
			return stat(dirPath);
		})
		.then((stat) => {
			if (stat.isDirectory()) {
				return dirPath;
			}
			throw new Error(`${dirPath} is not a directory`);
		});
};

const checkRemoved = (filePath) => {
	return stat(filePath)
		.then(
			() => {
				const error = new Error(`The file ${filePath} is not deleted.`);
				error.code = 'EEXIST';
				throw error;
			},
			(error) => {
				if (error.code === 'ENOENT') {
					return filePath;
				}
				throw error;
			}
		);
};

describe('checkRemoved', function () {

	it('should reject if there is something', function () {
		return checkRemoved(path.join(__dirname, 'index.js'))
			.then(
				() => {
					throw new Error('Resolved unexpectedly.');
				},
				(error) => {
					if (error.code !== 'EEXIST') {
						throw error;
					}
				}
			);
	});

	it('should resolve if there is nothing', function () {
		return checkRemoved(path.join(__dirname, `${Date.now()}`));
	});

});

describe('rmdir', function () {

	const testDir = path.join(__dirname, 'temp', 'rmdir', `${Date.now()}`);

	it('should resolve if there is nothing', function () {
		return checkRemoved(testDir)
			.then(() => {
				return rm.rmdir(testDir);
			});
	});

});

describe('rm', function () {

	const testDir = path.join(__dirname, 'temp', `${Date.now()}`);

	it('should resolve if there is nothing', function () {
		const testFilePath = path.join(testDir, '000.txt');
		return checkRemoved(testFilePath)
			.then(() => {
				return rm(testFilePath);
			});
	});

	it('should remove a file', function () {
		const testFilePath = path.join(testDir, '001.txt');
		const testFileData = 'test001';
		return writeFile(testFilePath, testFileData)
			.then(() => {
				return rm(testFilePath);
			})
			.then((removedFilePath) => {
				assert.equal(removedFilePath, testFilePath);
				return checkRemoved(testFilePath);
			});
	});

	it('should remove an empty directory', function () {
		const testDirPath = path.join(testDir, '002');
		return mkdir(testDirPath)
			.then(() => {
				return rm(testDirPath);
			})
			.then((removedDirPath) => {
				assert.equal(removedDirPath, testDirPath);
				return checkRemoved(testDirPath);
			});
	});

	it('should remove a non-empty directory', function () {
		const testFilePath = path.join(testDir, '003-1', '003-2', '003.txt');
		const testFileData = 'test003';
		const removeTarget = path.join(testFilePath, '..', '..');
		return writeFile(testFilePath, testFileData)
			.then(() => {
				return rm(removeTarget);
			})
			.then((removedDirPath) => {
				assert.equal(removedDirPath, removeTarget);
				return checkRemoved(removeTarget);
			});
	});

	it('should not remove a target file of a hard-link', function () {
		const originalFilePath = path.join(testDir, '004.txt');
		const testFileData = 'test004';
		const linkPath = path.join(testDir, '004link.txt');
		return writeFile(originalFilePath, testFileData)
			.then(() => {
				return link(originalFilePath, linkPath);
			})
			.then(() => {
				return rm(linkPath);
			})
			.then(() => {
				return checkRemoved(linkPath);
			})
			.then(() => {
				return stat(originalFilePath);
			})
			.then((stats) => {
				assert.equal(stats.isFile(), true);
			});
	});

	it('should not remove a target file of a symlink', function () {
		const originalFilePath = path.join(testDir, '005.txt');
		const testFileData = 'test005';
		const linkPath = path.join(testDir, '005link.txt');
		return writeFile(originalFilePath, testFileData)
			.then(() => {
				return symlink(originalFilePath, linkPath);
			})
			.then(() => {
				return rm(linkPath);
			})
			.then(() => {
				return checkRemoved(linkPath);
			})
			.then(() => {
				return stat(originalFilePath);
			})
			.then((stats) => {
				assert.equal(stats.isFile(), true);
			});
	});

	it('should not remove contents in a target directory of a symlink', function () {
		const originalFilePath = path.join(testDir, '006', '006.txt');
		const linkedDirPath = path.join(originalFilePath, '..');
		const testFileData = 'test006';
		const linkPath = path.join(testDir, '006link');
		return writeFile(originalFilePath, testFileData)
			.then(() => {
				return symlink(linkedDirPath, linkPath);
			})
			.then(() => {
				return rm(linkPath);
			})
			.then(() => {
				return checkRemoved(linkPath);
			})
			.then(() => {
				return readFile(originalFilePath, 'utf8');
			})
			.then((readData) => {
				assert.equal(readData, testFileData);
			});
	});

});
