const assert = require('assert');
const forEachKey = require('..');

describe('forEachKey', function () {

	it('should iterate key-value', function () {
		let keyValues = '';
		forEachKey({
			Shooter: [
				'Shooter',
				'Blaster'
			],
			Roller: [
				'Roller',
				'Brush'
			]
		}, function (value, key) {
			keyValues += '[' + key + ':' + value.join(',') + ']';
		});
		assert.equal(keyValues, '[Shooter:Shooter,Blaster][Roller:Roller,Brush]');
	});

	it('should ignore prototypes', function () {
		let keyValues = '';
		class S {

			constructor() {
				this.sub = 'Sprinkler';
				this.special = 'Inkstrike';
			}

			shot() {
				return 1;
			}

		}
		forEachKey(new S(), function (value, key) {
			keyValues += '[' + key + ':' + value + ']';
		});
		assert.equal(keyValues, '[sub:Sprinkler][special:Inkstrike]');
	});

	it('should break iteration', function () {
		let keyValues = '';
		forEachKey({
			Shooter: [
				'Shooter',
				'Blaster'
			],
			Roller: [
				'Roller',
				'Brush'
			]
		}, function (value, key) {
			keyValues += '[' + key + ':' + value.join(',') + ']';
			return true;
		});
		assert.equal(keyValues, '[Shooter:Shooter,Blaster]');
	});

});
