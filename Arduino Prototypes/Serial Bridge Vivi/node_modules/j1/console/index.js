const console = require('console');
const chalk = require('chalk');
const formatDate = require('../formatDate');
const isNumber = require('../isNumber');
const isString = require('../isString');
const isUndefined = require('../isUndefined');
const isFunction = require('../isFunction');

const LOGLEVEL_DEBUG = 0;
const LOGLEVEL_INFO = 1;
const LOGLEVEL_ERROR = 2;
const LOGLEVEL_SILENT = 9;

let cliValue = 0;

function addLogLevels(obj) {
	return Object.defineProperties(obj, {
		LOGLEVEL_DEBUG: {value: LOGLEVEL_DEBUG},
		LOGLEVEL_INFO: {value: LOGLEVEL_INFO},
		LOGLEVEL_ERROR: {value: LOGLEVEL_ERROR},
		LOGLEVEL_SILENT: {value: LOGLEVEL_SILENT}
	});
}

process.argv.find((arg) => {
	arg.replace(/--loglevel=(\d)/i, (match, level) => {
		cliValue = parseInt(level, 10);
	});
	return cliValue;
});

class Console extends console.Console {

	constructor(opts = {}) {
		if (isString(opts)) {
			opts = {id: opts};
		}
		const {
			output = process.stdout,
			errorOutput = process.stderr,
			id = '',
			colors = true,
			getDate
		} = opts;
		super(output, errorOutput);
		this.id = id;
		this.colors = colors;
		if (isFunction(getDate)) {
			this.getDate = getDate;
		}
		addLogLevels(this);
	}

	/* eslint-disable class-methods-use-this */
	get Console() {
		return Console;
	}

	create(...args) {
		return new Console(...args);
	}

	getDate() {
		return formatDate(new Date());
	}
	/* eslint-enable class-methods-use-this */

	get prefix() {
		let prefix = this.getDate();
		if (this.id) {
			prefix += ` [${this.id}]`;
		}
		if (this.colors) {
			prefix = chalk.gray(prefix);
		}
		return prefix;
	}

	getLogLevel() {
		let {logLevel} = this;
		if (cliValue) {
			return cliValue;
		} else if (!isNumber(logLevel)) {
			/* eslint-disable no-process-env */
			logLevel = parseInt(process.env.NODEJS_J1_LOGLEVEL, 10);
			/* eslint-enable no-process-env */
		}
		return logLevel;
	}

	print(targetLogLevel, isError, colorFn, ...args) {
		if (this.getLogLevel() > targetLogLevel) {
			return;
		}
		if (this.colors && isFunction(colorFn)) {
			args = args.map((arg) => {
				return isString(arg) ? colorFn(arg) : arg;
			});
		}
		super[isError ? 'error' : 'log'](this.prefix, ...args);
	}

	debug(...args) {
		this.print(LOGLEVEL_DEBUG, false, null, ...args);
	}

	info(...args) {
		this.print(LOGLEVEL_INFO, false, chalk.cyan, ...args);
	}

	error(...args) {
		this.print(LOGLEVEL_ERROR, true, chalk.red, ...args);
	}

	get onError() {
		return (error) => {
			if (isUndefined(error)) {
				error = new Error('onError was called with nothing');
			}
			this.error(error.stack || error);
		};
	}

}
addLogLevels(Console);

module.exports = new Console();
