const assert = require('assert');
const Writable = require('stream').Writable;
const _console = require('..');

const logLevels = [
	'LOGLEVEL_DEBUG',
	'LOGLEVEL_INFO',
	'LOGLEVEL_ERROR',
	'LOGLEVEL_SILENT'
];

describe('console', function () {

	it('should have constructor as console.Console', function () {
		assert.equal(_console.Console, _console.constructor);
	});

	it('should support id shorthand', function () {
		const id = 'shorthand';
		const console = _console.create(id);
		assert.equal(console.id, id);
	});

	describe('LOGLEVEL', function () {

		it('should be unwritable', function () {
			for (const key of logLevels) {
				const currentValue = _console[key];
				_console[key] = !currentValue;
				assert.equal(_console[key], currentValue);
			}
		});

	});

	describe('Console.LOGLEVEL', function () {

		it('should be unwritable', function () {
			const Console = _console.Console;
			for (const key of logLevels) {
				const currentValue = Console[key];
				Console[key] = !currentValue;
				assert.equal(Console[key], currentValue);
			}
		});

	});

	describe('log()', function () {

		it('should write to the output stream', function () {
			const date = new Date().toString();
			return new Promise((resolve) => {
				const writable = new Writable({
					objectMode: true
				});
				const console = _console.create({
					output: writable
				});
				writable._write = function (data, encoding, callback) {
					resolve(data);
					callback();
				};
				console.log(date);
			})
				.then((result) => {
					assert.equal(result, `${date}\n`);
				});
		});

	});

	describe('debug()', function () {

		it('should add some prefixes', function () {
			const date = new Date().toString();
			return new Promise((resolve) => {
				const writable = new Writable({
					objectMode: true
				});
				const console = _console.create({
					output: writable
				});
				writable._write = function (data, encoding, callback) {
					resolve(data);
					callback();
				};
				console.logLevel = console.LOGLEVEL_DEBUG;
				console.debug(date);
			})
				.then((result) => {
					assert.equal(result.endsWith(`${date}\n`), true);
				});
		});

		it('should use given getDate()', function () {
			const date = new Date().toString();
			return new Promise((resolve) => {
				const writable = new Writable({
					objectMode: true
				});
				const console = _console.create({
					id: 'getDate',
					output: writable,
					getDate: () => {
						return '2000-01-02 03:04:05';
					},
					colors: false
				});
				writable._write = function (data, encoding, callback) {
					resolve(data);
					callback();
				};
				console.logLevel = console.LOGLEVEL_DEBUG;
				console.debug(date);
			})
				.then((result) => {
					assert.equal(result, `2000-01-02 03:04:05 [getDate] ${date}\n`);
				});
		});

		it('should ignored if log level is higher than DEBUG', function () {
			const date = new Date().toString();
			return new Promise((resolve) => {
				const writable = new Writable({
					objectMode: true
				});
				const console = _console.create({
					output: writable,
					colors: false
				});
				writable._write = function (data, encoding, callback) {
					resolve(data);
					callback();
				};
				console.logLevel = console.LOGLEVEL_INFO;
				console.debug('Unexpected');
				console.logLevel = console.LOGLEVEL_DEBUG;
				console.debug(date);
			})
				.then((result) => {
					assert.equal(result.endsWith(`${date}\n`), true);
				});
		});

	});


	describe('info()', function () {

		it('should ignored if log level is higher than INFO', function () {
			const date = new Date().toString();
			return new Promise((resolve) => {
				const writable = new Writable({
					objectMode: true
				});
				const console = _console.create({
					output: writable,
					colors: false
				});
				writable._write = function (data, encoding, callback) {
					resolve(data);
					callback();
				};
				console.logLevel = console.LOGLEVEL_ERROR;
				console.info('Unexpected');
				console.logLevel = console.LOGLEVEL_INFO;
				console.info(date);
			})
				.then((result) => {
					assert.equal(result.endsWith(`${date}\n`), true);
				});
		});

	});

	describe('error()', function () {

		it('should ignored if log level is higher than ERROR', function () {
			const date = new Date().toString();
			return new Promise((resolve) => {
				const writable = new Writable({
					objectMode: true
				});
				const console = _console.create({
					errorOutput: writable,
					colors: false
				});
				writable._write = function (data, encoding, callback) {
					resolve(data);
					callback();
				};
				console.logLevel = console.LOGLEVEL_SILENT;
				console.error('Unexpected');
				console.logLevel = console.LOGLEVEL_ERROR;
				console.error(date);
			})
				.then((result) => {
					assert.equal(result.endsWith(`${date}\n`), true);
				});
		});

	});

});
