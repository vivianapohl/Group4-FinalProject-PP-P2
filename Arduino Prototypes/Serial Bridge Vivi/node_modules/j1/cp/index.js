const fs = require('fs');
const path = require('path');
const promisify = require('../promisify');
const mkdir = require('../mkdir');
const readdir = promisify(fs.readdir, fs);
const console = require('../console').create('copy');

function cp(from, to) {
	let readerIsReady = false;
	console.debug(`\n  from: ${from}\n    to: ${to}`);
	return new Promise((resolve, reject) => {
		fs.createReadStream(from)
			.once('error', reject)
			.once('readable', function () {
				readerIsReady = true;
				resolve(this);
			});
	})
	.then((reader) => {
		return new Promise((resolve, reject) => {
			reader
				.once('error', reject)
				.pipe(
					fs.createWriteStream(to)
						.once('error', reject)
						.once('finish', resolve)
				);
		});
	})
	.catch((error) => {
		if (readerIsReady) {
			switch (error.code) {
			case 'ENOENT':
				return mkdir(path.dirname(to))
				.then(() => {
					return cp(from, to);
				});
			default:
				throw error;
			}
		} else {
			switch (error.code) {
			case 'EISDIR':
				return readdir(from)
				.then((files) => {
					return Promise.all(files.map((file) => {
						return cp(
							path.join(from, file),
							path.join(to, file)
						);
					}));
				});
			default:
				throw error;
			}
		}
	});
}

module.exports = cp;
