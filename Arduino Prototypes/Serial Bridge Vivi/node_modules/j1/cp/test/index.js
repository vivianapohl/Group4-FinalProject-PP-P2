const path = require('path');
const fs = require('fs');
const assert = require('assert');
const cp = require('..');
const promisify = require('../../promisify');
const mkdir = require('../../mkdir');
const readFile = promisify(fs.readFile, fs);

describe('cp', function () {

	const baseDir = path.join(__dirname, 'temp', Date.now().toString());

	before(function () {
		return mkdir(baseDir);
	});

	it('should copy a file', function () {
		const from = path.join(__dirname, '001', '001.txt');
		const to = path.join(baseDir, '001.txt');
		return cp(from, to)
			.then(() => {
				return Promise.all([
					readFile(to, 'utf8'),
					readFile(from, 'utf8')
				]);
			})
			.then(([written, expected]) => {
				assert.equal(written, expected);
			});
	});

	it('should copy files', function () {
		const from = path.join(__dirname, '002');
		const to = path.join(baseDir, '002');
		return cp(from, to)
			.then(() => {
				return Promise.all([
					readFile(path.join(to, '002.txt'), 'utf8'),
					readFile(path.join(from, '002.txt'), 'utf8')
				]);
			})
			.then(([written, expected]) => {
				assert.equal(written, expected);
			});
	});

	it('should throw an error if source doesn\'t exist', function () {
		const from = path.join(baseDir, 'notexist-from');
		const to = path.join(baseDir, 'notexist-to');
		return cp(from, to)
			.then(() => {
				throw new Error('Resolved unexpectedly');
			})
			.catch((error) => {
				assert.equal(error.code, 'ENOENT');
			});
	});

});
