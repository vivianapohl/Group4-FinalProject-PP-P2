const path = require('path');
const fs = require('fs');
const {Readable} = require('stream');
const assert = require('assert');
const promisify = require('../../promisify');
const mkdir = require('../../mkdir');
const noop = require('../../noop');
const writeFile = require('..');
const readFile = promisify(fs.readFile, fs);
const baseDir = path.join(__dirname, 'temp', `${Date.now()}`);

describe('writeFile', function () {

	before(function () {
		return mkdir(baseDir);
	});

	it('should write data to a file', async function () {
		const targetPath = path.join(baseDir, '001.txt');
		const data = 'writeFile test 001';
		await writeFile(targetPath, data);
		const writtenData = await readFile(targetPath, 'utf8');
		assert.equal(writtenData, data);
	});

	it('should write data to a file in a nested directory', async function () {
		const targetPath = path.join(baseDir, 'a/b/c/002.txt');
		const data = 'writeFile test 002';
		await writeFile(targetPath, data);
		const writtenData = await readFile(targetPath, 'utf8');
		assert.equal(writtenData, data);
	});

	it('should write data to a file from a readable stream', async function () {
		const targetPath = path.join(baseDir, 'a/b/c/d/003.txt');
		const data1 = `data1:${Date.now()}`;
		const data2 = `data2:${Date.now()}`;
		const data3 = `data3:${Date.now()}`;
		const reader = new Readable();
		const delay = 50;
		/* eslint-disable no-underscore-dangle */
		reader._read = noop;
		/* eslint-enable no-underscore-dangle */
		reader.push(data1);
		process.nextTick(function () {
			reader.push(data2);
		});
		setTimeout(() => {
			reader.push(data3);
			reader.push(null);
		}, delay);
		await writeFile(targetPath, reader);
		const writtenData = await readFile(targetPath, 'utf8');
		assert.equal(writtenData, data1 + data2 + data3);
	});

});
