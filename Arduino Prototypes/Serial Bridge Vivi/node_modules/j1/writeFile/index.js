const fs = require('fs');
const path = require('path');
const {
	Readable,
	Stream,
	PassThrough
} = require('stream');

const mkdir = require('../mkdir');

/* eslint-disable no-underscore-dangle */
function getStream(data) {
	let reader;
	if (data instanceof Stream) {
		if (data.unshift) {
			reader = data;
		} else {
			reader = new Readable().wrap(data);
		}
	} else {
		reader = new PassThrough();
		reader.end(data);
	}
	return reader;
}
/* eslint-enable no-underscore-dangle */

function writeFile(filePath, data, options = {}) {
	const buffer = [];
	let reader = getStream(data)
	.on('data', function (chunk) {
		buffer.push(Buffer.from(chunk));
	});
	return new Promise((resolve, reject) => {
		reader
		.pipe(fs.createWriteStream(filePath))
		.once('error', function (error) {
			reject(error);
		})
		.once('finish', resolve);
	})
	.catch(async (error) => {
		switch (error.code) {
		case 'ENOENT':
			await mkdir(path.dirname(filePath), options.mode);
			reader.removeAllListeners();
			if (reader.readable) {
				reader.unshift(Buffer.concat(buffer));
			} else {
				reader = Buffer.concat(buffer);
			}
			return writeFile(filePath, reader);
		default:
			throw error;
		}
	});
}

module.exports = writeFile;
