function toBuffer(chunk) {
	return Buffer.from(chunk);
}

function toString(chunk) {
	return chunk.toString();
}

function readStream(readable) {
	return new Promise((resolve, reject) => {
		const chunks = [];
		let dataLength = 0;
		let isBuffer = false;
		readable
			.once('error', reject)
			.on('data', function (chunk) {
				chunks.push(chunk);
				dataLength += chunk.length;
				isBuffer = Buffer.isBuffer(chunk);
			})
			.once('end', () => {
				if (isBuffer) {
					resolve(Buffer.concat(chunks.map(toBuffer), dataLength));
				} else {
					resolve(chunks.map(toString).join(''));
				}
			});
	});
}

module.exports = readStream;
