const path = require('path');
const fs = require('fs');
const assert = require('assert');
const writeFile = require('../../writeFile');
const promisify = require('../../promisify');
const mkdir = require('..');
const stat = promisify(fs.stat, fs);

describe('mkdir', function () {

	const baseDir = path.join(__dirname, 'temp', `${Date.now()}`);

	it('should create a directory', function () {
		return mkdir(baseDir)
			.then((createdDir) => {
				assert.equal(createdDir, baseDir);
				return stat(baseDir);
			})
			.then((stats) => {
				assert.equal(stats.isDirectory(), true);
			});
	});

	it('should create a nested directory', function () {
		const targetDir = path.join(baseDir, 'a/b/c/d/e/f');
		return mkdir(targetDir)
			.then((createdDir) => {
				assert.equal(createdDir, targetDir);
				return stat(targetDir);
			})
			.then((stats) => {
				assert.equal(stats.isDirectory(), true);
			});
	});

	it('should create a directory without conflict', function () {
		const targetDir = path.join(baseDir, 'a/b/c/d/e/f/g');
		const targets = [];
		const count = 50;
		for (let i = 0; i < count; i++) {
			targets.push(targetDir);
		}
		assert.equal(targets.length, count);
		return Promise.all(targets.map((targetDir) => {
			return mkdir(targetDir);
		}))
			.then((results) => {
				assert.deepEqual(results, targets);
				return stat(targetDir);
			})
			.then((stats) => {
				assert.equal(stats.isDirectory(), true);
			});
	});

	it('should throw an error if there is something', function () {
		const targetFile = path.join(baseDir, 'eexist-test', 'file.txt');
		return writeFile(targetFile, 'data')
			.then(() => {
				return mkdir(targetFile);
			})
			.then(() => {
				throw new Error('Resolved unexpectedly');
			})
			.catch((error) => {
				assert.equal(error.code, 'EEXIST');
			});
	});

});
